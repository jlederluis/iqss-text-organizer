#!/usr/bin/env python

import clint
import sys
import os
import lucene
from textorganizer import indexfiles, searchfiles, addmetadata

class TextOrganizer:
    def __init__(self,lucenedir):
        self.lucenedir = lucenedir
        #lucene object containing selected documents
        self.scoreDocs = None
        #list of all terms in selected documents
        self.allTerms = None
        #dictionary containing TDM for selected documents        
        self.allDicts = None

    def parseargs(self,grouped_args):
        
        if '-a' in grouped_args:
            if len(grouped_args['-a']) == 1:
                add_files = True
            elif len(grouped_args['-a']) == 0:
                print 'Add_files flag passed, but no directory given. Ignoring -a flag.'
                add_files = False
            elif len(grouped_args['-a']) > 1:
                print 'Only one directory may be passed to txtorg -a. Ignoring -a flag.'
                add_files = False
        else:
            add_files = False

        if '-c' in grouped_args:
            if len(grouped_args['-c']) == 1:
                add_md = True
            elif len(grouped_args['-c']) == 0:
                print 'Import_metadata flag passed, but no CSV file given. Ignoring -c flag.'
                add_md = False
            elif len(grouped_args['-c']) > 1:
                print 'Only one CSV file may be passed to txtorg -c. Ignoring -c flag.'
                add_md = False
        else:
            add_md = False

        #first, add files from a directory if -a was passed
        if add_files:
            indexfiles.IndexFiles(grouped_args['-a'][0],self.lucenedir,lucene.StandardAnalyzer(lucene.Version.LUCENE_CURRENT))

        #next, update documents with metadata if -c was passed
        if add_md:
            self.add_metadata(grouped_args['-c'][0])
    

        self.mainprompt()

    def mainprompt(self):
        print "Entering interactive mode. Type 'h' or 'help' for supported syntax."
        while True:
        #present user with a prompt, grab input, and convert to lowercase
            instr=raw_input("> ").lower()

            if instr == 'q' or instr == 'quit' or instr == 'exit':
                break
            elif instr.startswith('select '):
                self.run_searcher(instr[7:])
            elif instr.startswith('export tdm'):
                self.export_tdm()
            elif instr.startswith('view fields'):
                self.view_fields()
            elif instr == 'h' or instr == 'help':
                self.show_help()
            else:
                print "Input not understood. Type 'h' or 'help' for help."

    def add_metadata(self,csvfile):
        directory = lucene.SimpleFSDirectory(lucene.File(self.lucenedir))
        searcher = lucene.IndexSearcher(directory, True)
        reader = lucene.IndexReader.open(directory, True)
        analyzer = lucene.StandardAnalyzer(lucene.Version.LUCENE_CURRENT)
        writer = lucene.IndexWriter(directory, analyzer, False, lucene.IndexWriter.MaxFieldLength.LIMITED)

        addmetadata.add_metadata_from_csv(searcher,reader,writer,csvfile)
        writer.close()
        
    def run_searcher(self,command):
        directory = lucene.SimpleFSDirectory(lucene.File(self.lucenedir))
        searcher = lucene.IndexSearcher(directory, True)
        reader = lucene.IndexReader.open(directory, True)
        analyzer = lucene.StandardAnalyzer(lucene.Version.LUCENE_CURRENT)

        try:
            self.scoreDocs, self.allTerms, self.allDicts = searchfiles.run(searcher, analyzer, reader, command)

        except lucene.JavaError:
            print "Invalid query; see Lucene documentation for information on query syntax"
            self.scoreDocs = None
            self.allTerms = None
            self.allDicts = None


        #Alex, you mentioned at the top of searchfiles.py that searcher.close() sometimes causes stack overflows, but it was not commented out. Did you fix this issue?

        searcher.close()

    def view_fields(self):
        if (self.scoreDocs is None) or (self.allTerms is None) or (self.allDicts is None):
            print "Select documents with \"select [query]\" before exporting TDM"
            return False

        directory = lucene.SimpleFSDirectory(lucene.File(self.lucenedir))
        searcher = lucene.IndexSearcher(directory, True)

        for count,scoreDoc in enumerate(self.scoreDocs):
            doc = searcher.doc(scoreDoc.doc)
            print '\nDocument {0}:'.format(count)
            for f in doc.getFields():
                field = lucene.Field.cast_(f)
                (k, v) = field.name(), field.stringValue()
                print "{0}: {1}".format(k,v)

    def export_tdm(self):
        if (self.scoreDocs is None) or (self.allTerms is None) or (self.allDicts is None):
            print "Select documents with \"select [query]\" before exporting TDM"
            return False

        print "Choose a file for export (leave blank to accept default -> ./tdm.csv)"
        outfile = './tdm.csv'
        outfile_raw = raw_input()
        if outfile_raw == "":
            outfile = os.path.realpath(outfile)
        else:
            outfile = os.path.realpath(os.path.expanduser(outfile_raw))

        print "Exporting TDM to ", outfile
        searchfiles.writeTDM(self.allDicts, self.allTerms, outfile)

    def show_help(self):
        print """Supported syntax: 

select [lucene query]
\tSelects all documents in the index matching query [lucene query].

export tdm
\tExports a Term Document Matrix for the selected documents.

view fields
\tPrints a list of all defined fields, and their values, for the selected documents.

quit
\tExits the program.

help
\tDisplays this dialog.
"""
        
if __name__ == '__main__':
    lucene.initVM()
    print 'lucene', lucene.VERSION

    programdir = os.path.join(os.path.dirname(__file__))
    lucenedir = os.path.join(programdir,'lucene_index')

    main = TextOrganizer(lucenedir)
    main.parseargs(clint.args.grouped)
